import org.apache.spark.SparkConf
org.apache.spark.SparkContext
org.apache.spark.sql.SparkSession
org.apache.spark.sql._
org.apache.spark.sql.types._
org.apche.spark.sql.types.IntegerType
org.apache.spark.sql.functions._
org.apache.spark.sql.functions.Upper
org.apache.spark.sql.functions.udf
org.apache.spark.sql.catalyst.expressions.Window
org.apache.spark.sql.expressions.Window

def main(args:Array[String]):Unit={

val conf = new SparkConf().setAppName("SparkIntPrac").setMaster("local[*]")
val sc = new SparkContext(conf)
sc.setLogLevel("ERROR")

val spark = SparkSession.builder.getOrCreate()
import spark.implicits._
======================
Tuples upper case:
======================
val columns = Seq("name","age")

val df1 = Seq(("ajay",32),("sam sri",35),("sarvan kumar",34),("arun kumar",30),("prem",35),("guru",37)).toDF(columns:_*)

df1.show()

val dfini = df1.withColumn("name",initcap(col("name"))

val dfs=df1.withColumn("cap",concat(upper(substring(col("name"),1,1)),substring(col("name"),2,150)))

dfs.show()

val dfst=udf{(str:String)=> str.substring(0,1).toUpperCase().concat(str.substring(1)) }

val dfinal=df1.withColumn("upper",dfst(col("names")) )
dfinal.show()
======================
Height orderby:
======================

val data = Array( (),()     )
val srt = data.sortBy(_._2)

val df= sc.parallelize(data).toDF("names","height")

val dffil=df.filter(col("names")>155))

val rdd1 = dffil.rdd

val newrdd= rdd1.map(x=> x(0),x(1)))

newrdd.foreach(println)

=================================================
Sending a whole sentence to change the upper case
================================================
val columns = Seq("Seqno","Quote")
val data = Seq(("1", "Be the change that you wish to see in the world"),
("2", "Everyone thinks of changing the world, but no one thinks of changing himself."),
("3", "The purpose of our lives is to be happy.")
)


val df = data.toDF(columns:_*)
df.show(false)

val convertCase =  (str:String) => {
val arr = str.split(" ")
arr.map(f=>  f.substring(0,1).toUpperCase + f.substring(1, f.length)).mkString(" ")
}
val convertUDF = udf(convertCase)

df.select(col("Seqno"),
convertUDF(col("Quote")).as("Quote") ).show(false)

One line code:
val convertUDF = udf((value: String) => value.split(' ').map(_.capitalize).mkString(" "))


==================================================================================================
Sending a whole sentence of various columns to change the upper case
=================================================================================================
val data = Seq(
  (1, "Frankfurt am main", "just test", "Germany"),
  (2, "should do this also", "test", "France"),
)
val df = spark.sparkContext.parallelize(data).toDF("ID", "City", "test", "Country")

val convertUDF = udf((value: String) => value.split(' ').map(_.capitalize).mkString(" "))
val dfCapitalized = df.columns.foldLeft(df) {
  (df, column) => df.withColumn(column, convertUDF(col(column)))
}
dfCapitalized.show(false)


}

}
